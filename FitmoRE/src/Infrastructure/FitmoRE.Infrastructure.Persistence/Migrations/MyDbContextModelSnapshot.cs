// <auto-generated />
using System;
using FitmoRE.Infrastructure.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FitmoRE.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FitmoRE.Infrastructure.Persistence.Entities.Branch", b =>
                {
                    b.Property<string>("BranchId")
                        .HasColumnType("text")
                        .HasColumnName("branchId");

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("Workinghours")
                        .HasColumnType("text")
                        .HasColumnName("workinghours");

                    b.HasKey("BranchId")
                        .HasName("Branch_pkey");

                    b.ToTable("Branch", (string)null);
                });

            modelBuilder.Entity("FitmoRE.Infrastructure.Persistence.Entities.Client", b =>
                {
                    b.Property<string>("Clientid")
                        .HasColumnType("text")
                        .HasColumnName("clientid");

                    b.Property<DateOnly?>("Dateofbirth")
                        .HasColumnType("date")
                        .HasColumnName("dateofbirth");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Fullname")
                        .HasColumnType("text")
                        .HasColumnName("fullname");

                    b.Property<bool?>("Isactive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Phonenumber")
                        .HasColumnType("text")
                        .HasColumnName("phonenumber");

                    b.HasKey("Clientid")
                        .HasName("Client_pkey");

                    b.ToTable("Client", (string)null);
                });

            modelBuilder.Entity("FitmoRE.Infrastructure.Persistence.Entities.Employee", b =>
                {
                    b.Property<string>("EmployeeId")
                        .HasColumnType("text")
                        .HasColumnName("employeeId");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Fullname")
                        .HasColumnType("text")
                        .HasColumnName("fullname");

                    b.Property<bool?>("Isactive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Phonenumber")
                        .HasColumnType("text")
                        .HasColumnName("phonenumber");

                    b.Property<string>("Position")
                        .HasColumnType("text")
                        .HasColumnName("position");

                    b.Property<DateOnly?>("Startdate")
                        .HasColumnType("date")
                        .HasColumnName("startdate");

                    b.Property<DateOnly?>("Workschedule")
                        .HasColumnType("date")
                        .HasColumnName("workschedule");

                    b.HasKey("EmployeeId")
                        .HasName("Employee_pkey");

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("FitmoRE.Infrastructure.Persistence.Entities.FitnessService", b =>
                {
                    b.Property<string>("Serviceid")
                        .HasColumnType("text")
                        .HasColumnName("serviceid");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("numeric")
                        .HasColumnName("cost");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Duration")
                        .HasColumnType("text")
                        .HasColumnName("duration");

                    b.Property<string>("Employeeid")
                        .HasColumnType("text")
                        .HasColumnName("employeeid");

                    b.Property<string>("Roomid")
                        .HasColumnType("text")
                        .HasColumnName("roomid");

                    b.HasKey("Serviceid")
                        .HasName("FitnessService_pkey");

                    b.HasIndex("Employeeid");

                    b.HasIndex("Roomid");

                    b.ToTable("FitnessService", (string)null);
                });

            modelBuilder.Entity("FitmoRE.Infrastructure.Persistence.Entities.GymRoom", b =>
                {
                    b.Property<string>("Roomid")
                        .HasColumnType("text")
                        .HasColumnName("roomid");

                    b.Property<string>("Branchid")
                        .HasColumnType("text")
                        .HasColumnName("branchid");

                    b.Property<int?>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("capacity");

                    b.Property<string>("Roomnumber")
                        .HasColumnType("text")
                        .HasColumnName("roomnumber");

                    b.Property<int?>("Space")
                        .HasColumnType("integer")
                        .HasColumnName("space");

                    b.Property<double?>("Temperature")
                        .HasColumnType("double precision")
                        .HasColumnName("temperature");

                    b.HasKey("Roomid")
                        .HasName("GymRoom_pkey");

                    b.HasIndex("Branchid");

                    b.ToTable("GymRoom", (string)null);
                });

            modelBuilder.Entity("FitmoRE.Infrastructure.Persistence.Entities.Payment", b =>
                {
                    b.Property<string>("Paymentid")
                        .HasColumnType("text")
                        .HasColumnName("paymentid");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<string>("Clientid")
                        .HasColumnType("text")
                        .HasColumnName("clientid");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<bool?>("Ispaid")
                        .HasColumnType("boolean")
                        .HasColumnName("ispaid");

                    b.HasKey("Paymentid")
                        .HasName("Payment_pkey");

                    b.HasIndex("Clientid");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("FitmoRE.Infrastructure.Persistence.Entities.Subscription", b =>
                {
                    b.Property<string>("Subscriptionid")
                        .HasColumnType("text")
                        .HasColumnName("subscriptionid");

                    b.Property<string>("Clientid")
                        .HasColumnType("text")
                        .HasColumnName("clientid");

                    b.Property<string>("Duration")
                        .HasColumnType("text")
                        .HasColumnName("duration");

                    b.Property<bool?>("Isactive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<DateOnly?>("Startdate")
                        .HasColumnType("date")
                        .HasColumnName("startdate");

                    b.Property<string>("Tariffid")
                        .HasColumnType("text")
                        .HasColumnName("tariffid");

                    b.HasKey("Subscriptionid")
                        .HasName("Subscription_pkey");

                    b.HasIndex("Clientid");

                    b.HasIndex("Tariffid");

                    b.ToTable("Subscription", (string)null);
                });

            modelBuilder.Entity("FitmoRE.Infrastructure.Persistence.Entities.Tariff", b =>
                {
                    b.Property<string>("Tariffid")
                        .HasColumnType("text")
                        .HasColumnName("tariffid");

                    b.Property<string>("Tariffcategoryid")
                        .HasColumnType("text")
                        .HasColumnName("tariffcategoryid");

                    b.Property<string>("Tarifftypeid")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tarifftypeid");

                    b.HasKey("Tariffid")
                        .HasName("tariffid");

                    b.HasIndex("Tariffcategoryid");

                    b.HasIndex("Tarifftypeid");

                    b.ToTable("Tariff", (string)null);
                });

            modelBuilder.Entity("FitmoRE.Infrastructure.Persistence.Entities.TariffCategory", b =>
                {
                    b.Property<string>("Tariffcategoryid")
                        .HasColumnType("text")
                        .HasColumnName("tariffcategoryid");

                    b.Property<char>("Category")
                        .HasColumnType("char")
                        .HasColumnName("category");

                    b.HasKey("Tariffcategoryid")
                        .HasName("TariffCategory_pkey");

                    b.ToTable("TariffCategory", (string)null);
                });

            modelBuilder.Entity("FitmoRE.Infrastructure.Persistence.Entities.TariffType", b =>
                {
                    b.Property<string>("Tarifftypeid")
                        .HasColumnType("text")
                        .HasColumnName("tarifftypeid");

                    b.Property<char>("Type")
                        .HasColumnType("char")
                        .HasColumnName("type");

                    b.HasKey("Tarifftypeid")
                        .HasName("TariffType_pkey");

                    b.ToTable("TariffType", (string)null);
                });

            modelBuilder.Entity("FitmoRE.Infrastructure.Persistence.Entities.TrainingRegistration", b =>
                {
                    b.Property<string>("Registrationid")
                        .HasColumnType("text")
                        .HasColumnName("registrationid");

                    b.Property<string>("Clientid")
                        .HasColumnType("text")
                        .HasColumnName("clientid");

                    b.Property<bool?>("Isconfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("isconfirmed");

                    b.Property<DateOnly?>("Registrationdate")
                        .HasColumnType("date")
                        .HasColumnName("registrationdate");

                    b.Property<string>("Trainingid")
                        .HasColumnType("text")
                        .HasColumnName("trainingid");

                    b.HasKey("Registrationid")
                        .HasName("TrainingRegistration_pkey");

                    b.HasIndex("Clientid");

                    b.HasIndex("Trainingid");

                    b.ToTable("TrainingRegistration", (string)null);
                });

            modelBuilder.Entity("FitmoRE.Infrastructure.Persistence.Entities.TrainingSession", b =>
                {
                    b.Property<string>("Trainingid")
                        .HasColumnType("text")
                        .HasColumnName("trainingid");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Employeeid")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("employeeid ");

                    b.Property<DateTimeOffset?>("Endtime")
                        .HasColumnType("time with time zone")
                        .HasColumnName("endtime");

                    b.Property<int?>("Numberofparticipants")
                        .HasColumnType("integer")
                        .HasColumnName("numberofparticipants");

                    b.Property<string>("Roomid")
                        .HasColumnType("text")
                        .HasColumnName("roomid");

                    b.Property<DateTimeOffset?>("Starttime")
                        .HasColumnType("time with time zone")
                        .HasColumnName("starttime");

                    b.HasKey("Trainingid")
                        .HasName("TrainingSession_pkey");

                    b.HasIndex("Employeeid");

                    b.HasIndex("Roomid");

                    b.ToTable("TrainingSession", (string)null);
                });

            modelBuilder.Entity("FitmoRE.Infrastructure.Persistence.Entities.FitnessService", b =>
                {
                    b.HasOne("FitmoRE.Infrastructure.Persistence.Entities.Employee", "Employee")
                        .WithMany("FitnessServices")
                        .HasForeignKey("Employeeid")
                        .HasConstraintName("employeeid");

                    b.HasOne("FitmoRE.Infrastructure.Persistence.Entities.GymRoom", "Room")
                        .WithMany("FitnessServices")
                        .HasForeignKey("Roomid")
                        .HasConstraintName("FitnessService_roomid_fkey");

                    b.Navigation("Employee");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("FitmoRE.Infrastructure.Persistence.Entities.GymRoom", b =>
                {
                    b.HasOne("FitmoRE.Infrastructure.Persistence.Entities.Branch", "Branch")
                        .WithMany("GymRooms")
                        .HasForeignKey("Branchid")
                        .HasConstraintName("GymRoom_branchid_fkey");

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("FitmoRE.Infrastructure.Persistence.Entities.Payment", b =>
                {
                    b.HasOne("FitmoRE.Infrastructure.Persistence.Entities.Client", "Client")
                        .WithMany("Payments")
                        .HasForeignKey("Clientid")
                        .HasConstraintName("Payment_clientid_fkey");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("FitmoRE.Infrastructure.Persistence.Entities.Subscription", b =>
                {
                    b.HasOne("FitmoRE.Infrastructure.Persistence.Entities.Client", "Client")
                        .WithMany("Subscriptions")
                        .HasForeignKey("Clientid")
                        .HasConstraintName("Subscription_clientid_fkey");

                    b.HasOne("FitmoRE.Infrastructure.Persistence.Entities.Tariff", "Tariff")
                        .WithMany("Subscriptions")
                        .HasForeignKey("Tariffid")
                        .HasConstraintName("Subscription_tariffid_fkey");

                    b.Navigation("Client");

                    b.Navigation("Tariff");
                });

            modelBuilder.Entity("FitmoRE.Infrastructure.Persistence.Entities.Tariff", b =>
                {
                    b.HasOne("FitmoRE.Infrastructure.Persistence.Entities.TariffCategory", "Tariffcategory")
                        .WithMany("Tariffs")
                        .HasForeignKey("Tariffcategoryid")
                        .HasConstraintName("Tariff_tariffcategoryid_fkey");

                    b.HasOne("FitmoRE.Infrastructure.Persistence.Entities.TariffType", "Tarifftype")
                        .WithMany("Tariffs")
                        .HasForeignKey("Tarifftypeid")
                        .IsRequired()
                        .HasConstraintName("Tariff_tarifftypeid_fkey");

                    b.Navigation("Tariffcategory");

                    b.Navigation("Tarifftype");
                });

            modelBuilder.Entity("FitmoRE.Infrastructure.Persistence.Entities.TrainingRegistration", b =>
                {
                    b.HasOne("FitmoRE.Infrastructure.Persistence.Entities.Client", "Client")
                        .WithMany("TrainingRegistrations")
                        .HasForeignKey("Clientid")
                        .HasConstraintName("TrainingRegistration_clientid_fkey");

                    b.HasOne("FitmoRE.Infrastructure.Persistence.Entities.TrainingSession", "Training")
                        .WithMany("TrainingRegistrations")
                        .HasForeignKey("Trainingid")
                        .HasConstraintName("TrainingRegistration_trainingid_fkey");

                    b.Navigation("Client");

                    b.Navigation("Training");
                });

            modelBuilder.Entity("FitmoRE.Infrastructure.Persistence.Entities.TrainingSession", b =>
                {
                    b.HasOne("FitmoRE.Infrastructure.Persistence.Entities.Employee", "Employee")
                        .WithMany("TrainingSessions")
                        .HasForeignKey("Employeeid")
                        .IsRequired()
                        .HasConstraintName("TrainingSession_employeeid _fkey");

                    b.HasOne("FitmoRE.Infrastructure.Persistence.Entities.GymRoom", "Room")
                        .WithMany("TrainingSessions")
                        .HasForeignKey("Roomid")
                        .HasConstraintName("TrainingSession_roomid_fkey");

                    b.Navigation("Employee");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("FitmoRE.Infrastructure.Persistence.Entities.Branch", b =>
                {
                    b.Navigation("GymRooms");
                });

            modelBuilder.Entity("FitmoRE.Infrastructure.Persistence.Entities.Client", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Subscriptions");

                    b.Navigation("TrainingRegistrations");
                });

            modelBuilder.Entity("FitmoRE.Infrastructure.Persistence.Entities.Employee", b =>
                {
                    b.Navigation("FitnessServices");

                    b.Navigation("TrainingSessions");
                });

            modelBuilder.Entity("FitmoRE.Infrastructure.Persistence.Entities.GymRoom", b =>
                {
                    b.Navigation("FitnessServices");

                    b.Navigation("TrainingSessions");
                });

            modelBuilder.Entity("FitmoRE.Infrastructure.Persistence.Entities.Tariff", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("FitmoRE.Infrastructure.Persistence.Entities.TariffCategory", b =>
                {
                    b.Navigation("Tariffs");
                });

            modelBuilder.Entity("FitmoRE.Infrastructure.Persistence.Entities.TariffType", b =>
                {
                    b.Navigation("Tariffs");
                });

            modelBuilder.Entity("FitmoRE.Infrastructure.Persistence.Entities.TrainingSession", b =>
                {
                    b.Navigation("TrainingRegistrations");
                });
#pragma warning restore 612, 618
        }
    }
}
